$version Generated by VerilatedVcd $end
$timescale 1ps $end
 $scope module TOP $end
  $scope module $unit $end
   $var wire 32 E TAG_MSB [31:0] $end
   $var wire 32 F TAG_LSB [31:0] $end
   $var wire 32 G SETS [31:0] $end
  $upscope $end
  $var wire 1 - clk $end
  $var wire 1 . rst $end
  $var wire 70 / cpu_req [69:0] $end
  $var wire 33 2 cpu_resp [32:0] $end
  $var wire 33 4 mem_resp [32:0] $end
  $var wire 70 6 mem_req [69:0] $end
  $var wire 32 9 cpu_req_addr [31:0] $end
  $var wire 32 : cpu_req_data [31:0] $end
  $var wire 2 ; cpu_req_op [1:0] $end
  $var wire 4 < cpu_req_mode_addr [3:0] $end
  $var wire 1 = cpu_req_valid $end
  $var wire 32 > cpu_resp_data [31:0] $end
  $var wire 1 ? cpu_resp_ready $end
  $var wire 32 @ mem_resp_data [31:0] $end
  $var wire 1 A mem_resp_ready $end
  $scope module cache_FSM $end
   $var wire 1 - clk $end
   $var wire 1 . rst $end
   $var wire 70 / cpu_req [69:0] $end
   $var wire 33 2 cpu_resp [32:0] $end
   $var wire 33 4 mem_resp [32:0] $end
   $var wire 70 6 mem_req [69:0] $end
   $var wire 32 9 cpu_req_addr [31:0] $end
   $var wire 32 : cpu_req_data [31:0] $end
   $var wire 2 ; cpu_req_op [1:0] $end
   $var wire 4 < cpu_req_mode_addr [3:0] $end
   $var wire 1 = cpu_req_valid $end
   $var wire 32 > cpu_resp_data [31:0] $end
   $var wire 1 ? cpu_resp_ready $end
   $var wire 32 @ mem_resp_data [31:0] $end
   $var wire 1 A mem_resp_ready $end
   $var wire 1 B cpu_req_vaild $end
   $var wire 32 C current_state [31:0] $end
   $var wire 32 # next_state [31:0] $end
   $var wire 33 $ next_cpu_resp [32:0] $end
   $var wire 70 & next_mem_req [69:0] $end
   $var wire 87 ) cache_line [86:0] $end
   $var wire 8 D set [7:0] $end
   $var wire 32 , current_addr [31:0] $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b00000000000000000000000000000000 #
b000000000000000000000000000000000 $
b0000000000000000000000000000000000000000000000000000000000000000000000 &
b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 )
b00000000000000000000000000000000 ,
1-
1.
b0000000000000000000000000000000000000000000000000000000000000000000000 /
b000000000000000000000000000000000 2
b000000000000000000000000000000000 4
b0000000000000000000000000000000000000000000000000000000000000000000000 6
b00000000000000000000000000000000 9
b00000000000000000000000000000000 :
b00 ;
b0000 <
0=
b00000000000000000000000000000000 >
0?
b00000000000000000000000000000000 @
0A
0B
b00000000000000000000000000000000 C
b00000000 D
b00000000000000000000000000011111 E
b00000000000000000000000000001011 F
b00000000000000000000000100000000 G
#1
0-
#2
1-
#3
0-
#4
1-
#5
0-
#6
1-
#7
0-
#8
1-
#9
0-
#10
1-
#11
0-
#12
1-
#13
0-
#14
1-
#15
0-
#16
1-
#17
0-
#18
1-
#19
0-
#20
1-
0.
1=
#21
0-
#22
1-
b10111011101110111011101110111011 @
#23
0-
