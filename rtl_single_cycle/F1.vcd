$version Generated by VerilatedVcd $end
$date Thu Dec  5 17:01:37 2024 $end
$timescale 1ps $end

 $scope module TOP $end
  $var wire 32 d a0 [31:0] $end
  $var wire 32 e a1 [31:0] $end
  $var wire 32 f a7 [31:0] $end
  $var wire  1 b clk $end
  $var wire  1 c rst $end
  $scope module top $end
   $var wire  5 * A1 [4:0] $end
   $var wire  5 + A2 [4:0] $end
   $var wire  5 , A3 [4:0] $end
   $var wire 32 5 ALUResult [31:0] $end
   $var wire  1 1 ALUSrc $end
   $var wire  4 0 ALUctrl [3:0] $end
   $var wire 32 & ExtImm [31:0] $end
   $var wire  3 ) ImmSrc [2:0] $end
   $var wire  1 3 MemWrite $end
   $var wire 32 ' PC [31:0] $end
   $var wire  2 % PCSrc [1:0] $end
   $var wire 32 g RD [31:0] $end
   $var wire 32 . RD1 [31:0] $end
   $var wire 32 / RD2 [31:0] $end
   $var wire  1 - RegWrite $end
   $var wire 32 h Result [31:0] $end
   $var wire  2 2 ResultSrc [1:0] $end
   $var wire 32 . SrcA [31:0] $end
   $var wire 32 7 SrcB [31:0] $end
   $var wire 32 i WIDTH [31:0] $end
   $var wire  1 6 Zero $end
   $var wire 32 d a0 [31:0] $end
   $var wire 32 e a1 [31:0] $end
   $var wire 32 f a7 [31:0] $end
   $var wire 32 ' addr [31:0] $end
   $var wire  1 b clk $end
   $var wire 32 ( instr [31:0] $end
   $var wire  3 4 modeBU [2:0] $end
   $var wire  1 c rst $end
   $scope module alu $end
    $var wire 32 5 ALUResult [31:0] $end
    $var wire  4 0 ALUctrl [3:0] $end
    $var wire 32 j CONTROL_WIDTH [31:0] $end
    $var wire 32 i DATA_WIDTH [31:0] $end
    $var wire 32 . SrcA [31:0] $end
    $var wire 32 7 SrcB [31:0] $end
    $var wire  1 6 Zero $end
   $upscope $end
   $scope module control_unit $end
    $var wire  4 0 ALUCtrl [3:0] $end
    $var wire  2 ; ALUOp [1:0] $end
    $var wire  1 1 ALUSrc $end
    $var wire 32 i DATA_WIDTH [31:0] $end
    $var wire  3 ) ImmSrc [2:0] $end
    $var wire 32 ( Instr [31:0] $end
    $var wire  1 = Load $end
    $var wire  1 3 MemWrite $end
    $var wire  2 % PCSrc [1:0] $end
    $var wire  1 - RegWrite $end
    $var wire  2 2 ResultSrc [1:0] $end
    $var wire  1 < Store $end
    $var wire  3 9 funct3 [14:12] $end
    $var wire  1 : funct7 $end
    $var wire  3 4 modeBU [2:0] $end
    $var wire  7 8 op [6:0] $end
    $scope module alu_decoder $end
     $var wire  4 0 ALUCtrl [3:0] $end
     $var wire  2 ; ALUOp [1:0] $end
     $var wire  3 9 funct3 [2:0] $end
     $var wire  1 : funct7 $end
     $var wire  1 > op $end
    $upscope $end
   $upscope $end
   $scope module data_memory $end
    $var wire 32 5 A [31:0] $end
    $var wire 32 g RD [31:0] $end
    $var wire 32 h Result [31:0] $end
    $var wire  2 2 ResultSrc [1:0] $end
    $var wire 32 / WD [31:0] $end
    $var wire  1 3 WE $end
    $var wire 32 i WIDTH [31:0] $end
    $var wire  1 b clk $end
    $var wire  3 4 modeBU [2:0] $end
   $upscope $end
   $scope module instruction_memory $end
    $var wire 32 i ADDRESS_WIDTH [31:0] $end
    $var wire 32 i DATA_WIDTH [31:0] $end
    $var wire 32 ' addr [31:0] $end
    $var wire 32 ( instr [31:0] $end
    $var wire 32 # rom_array[-1] [31:0] $end
    $var wire 32 $ rom_array[0] [31:0] $end
   $upscope $end
   $scope module pc $end
    $var wire 32 5 ALUResult [31:0] $end
    $var wire 32 ' PCF [31:0] $end
    $var wire 32 ? PCPlus4F [31:0] $end
    $var wire  2 % PCSrc [1:0] $end
    $var wire 32 @ PCTarget [31:0] $end
    $var wire 32 i WIDTH [31:0] $end
    $var wire  1 6 ZeroE $end
    $var wire  1 b clk $end
    $var wire 32 A out [31:0] $end
    $var wire  1 c rst $end
   $upscope $end
   $scope module regfile $end
    $var wire  5 * AD1 [4:0] $end
    $var wire  5 + AD2 [4:0] $end
    $var wire  5 , AD3 [4:0] $end
    $var wire 32 k ADDRESS_WIDTH [31:0] $end
    $var wire 32 i DATA_WIDTH [31:0] $end
    $var wire 32 . RD1 [31:0] $end
    $var wire 32 / RD2 [31:0] $end
    $var wire 32 h WD3 [31:0] $end
    $var wire  1 - WE3 $end
    $var wire 32 d a0 [31:0] $end
    $var wire 32 e a1 [31:0] $end
    $var wire 32 f a7 [31:0] $end
    $var wire  1 b clk $end
    $var wire 32 B registerfile_array[0] [31:0] $end
    $var wire 32 L registerfile_array[10] [31:0] $end
    $var wire 32 M registerfile_array[11] [31:0] $end
    $var wire 32 N registerfile_array[12] [31:0] $end
    $var wire 32 O registerfile_array[13] [31:0] $end
    $var wire 32 P registerfile_array[14] [31:0] $end
    $var wire 32 Q registerfile_array[15] [31:0] $end
    $var wire 32 R registerfile_array[16] [31:0] $end
    $var wire 32 S registerfile_array[17] [31:0] $end
    $var wire 32 T registerfile_array[18] [31:0] $end
    $var wire 32 U registerfile_array[19] [31:0] $end
    $var wire 32 C registerfile_array[1] [31:0] $end
    $var wire 32 V registerfile_array[20] [31:0] $end
    $var wire 32 W registerfile_array[21] [31:0] $end
    $var wire 32 X registerfile_array[22] [31:0] $end
    $var wire 32 Y registerfile_array[23] [31:0] $end
    $var wire 32 Z registerfile_array[24] [31:0] $end
    $var wire 32 [ registerfile_array[25] [31:0] $end
    $var wire 32 \ registerfile_array[26] [31:0] $end
    $var wire 32 ] registerfile_array[27] [31:0] $end
    $var wire 32 ^ registerfile_array[28] [31:0] $end
    $var wire 32 _ registerfile_array[29] [31:0] $end
    $var wire 32 D registerfile_array[2] [31:0] $end
    $var wire 32 ` registerfile_array[30] [31:0] $end
    $var wire 32 a registerfile_array[31] [31:0] $end
    $var wire 32 E registerfile_array[3] [31:0] $end
    $var wire 32 F registerfile_array[4] [31:0] $end
    $var wire 32 G registerfile_array[5] [31:0] $end
    $var wire 32 H registerfile_array[6] [31:0] $end
    $var wire 32 I registerfile_array[7] [31:0] $end
    $var wire 32 J registerfile_array[8] [31:0] $end
    $var wire 32 K registerfile_array[9] [31:0] $end
   $upscope $end
   $scope module regfile_mux $end
    $var wire 32 i WIDTH [31:0] $end
    $var wire 32 5 in0 [31:0] $end
    $var wire 32 g in1 [31:0] $end
    $var wire 32 ? in2 [31:0] $end
    $var wire 32 h out [31:0] $end
    $var wire  2 2 sel [1:0] $end
   $upscope $end
   $scope module sign_extend $end
    $var wire 32 i DATA_WIDTH [31:0] $end
    $var wire 32 & ImmExt [31:0] $end
    $var wire 32 ( ImmInput [31:0] $end
    $var wire  3 ) ImmSrc [2:0] $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b00000000000000000000000000000000 #
b00000000000000000000000000000000 $
b00 %
b00000000000000000000000000000000 &
b00000000000000000000000000000000 '
b00000000000000000000000000000000 (
b000 )
b00000 *
b00000 +
b00000 ,
0-
b00000000000000000000000000000000 .
b00000000000000000000000000000000 /
b0000 0
11
b00 2
03
b000 4
b00000000000000000000000000000000 5
06
b00000000000000000000000000000000 7
b0000000 8
b000 9
0:
b00 ;
0<
0=
0>
b00000000000000000000000000000100 ?
b00000000000000000000000000000000 @
b00000000000000000000000000000100 A
b00000000000000000000000000000000 B
b00000000000000000000000000000000 C
b00000000000000000000000000000000 D
b00000000000000000000000000000000 E
b00000000000000000000000000000000 F
b00000000000000000000000000000000 G
b00000000000000000000000000000000 H
b00000000000000000000000000000000 I
b00000000000000000000000000000000 J
b00000000000000000000000000000000 K
b00000000000000000000000000000000 L
b00000000000000000000000000000000 M
b00000000000000000000000000000000 N
b00000000000000000000000000000000 O
b00000000000000000000000000000000 P
b00000000000000000000000000000000 Q
b00000000000000000000000000000000 R
b00000000000000000000000000000000 S
b00000000000000000000000000000000 T
b00000000000000000000000000000000 U
b00000000000000000000000000000000 V
b00000000000000000000000000000000 W
b00000000000000000000000000000000 X
b00000000000000000000000000000000 Y
b00000000000000000000000000000000 Z
b00000000000000000000000000000000 [
b00000000000000000000000000000000 \
b00000000000000000000000000000000 ]
b00000000000000000000000000000000 ^
b00000000000000000000000000000000 _
b00000000000000000000000000000000 `
b00000000000000000000000000000000 a
1b
0c
b00000000000000000000000000000000 d
b00000000000000000000000000000000 e
b00000000000000000000000000000000 f
b00000000000000000000000000000000 g
b00000000000000000000000000000000 h
b00000000000000000000000000100000 i
b00000000000000000000000000000100 j
b00000000000000000000000000000101 k
