$version Generated by VerilatedVcd $end
$timescale 1ps $end
 $scope module TOP $end
  $var wire 1 # clk $end
  $var wire 1 $ rst $end
  $var wire 1 % trigger $end
  $var wire 32 & a0 [31:0] $end
  $var wire 32 ' a1 [31:0] $end
  $var wire 32 ( a2 [31:0] $end
  $var wire 32 ) a3 [31:0] $end
  $var wire 32 * a4 [31:0] $end
  $var wire 32 + a5 [31:0] $end
  $var wire 32 , a6 [31:0] $end
  $var wire 32 - a7 [31:0] $end
  $var wire 32 . t0 [31:0] $end
  $var wire 32 / t1 [31:0] $end
  $var wire 32 0 t2 [31:0] $end
  $var wire 32 1 t3 [31:0] $end
  $var wire 32 2 t4 [31:0] $end
  $var wire 32 3 t5 [31:0] $end
  $var wire 32 4 t6 [31:0] $end
  $var wire 32 5 s0 [31:0] $end
  $var wire 32 6 s1 [31:0] $end
  $var wire 32 7 s2 [31:0] $end
  $var wire 32 8 s3 [31:0] $end
  $var wire 32 9 s4 [31:0] $end
  $var wire 32 : s5 [31:0] $end
  $var wire 32 ; s6 [31:0] $end
  $var wire 32 < s7 [31:0] $end
  $var wire 32 = s8 [31:0] $end
  $var wire 32 > s9 [31:0] $end
  $var wire 32 ? s10 [31:0] $end
  $var wire 32 @ s11 [31:0] $end
  $scope module top $end
   $var wire 32 ~# WIDTH [31:0] $end
   $var wire 1 A clk $end
   $var wire 1 B rst $end
   $var wire 1 C trigger $end
   $var wire 32 D a0 [31:0] $end
   $var wire 32 E a1 [31:0] $end
   $var wire 32 F a2 [31:0] $end
   $var wire 32 G a3 [31:0] $end
   $var wire 32 H a4 [31:0] $end
   $var wire 32 I a5 [31:0] $end
   $var wire 32 J a6 [31:0] $end
   $var wire 32 K a7 [31:0] $end
   $var wire 32 L t0 [31:0] $end
   $var wire 32 M t1 [31:0] $end
   $var wire 32 N t2 [31:0] $end
   $var wire 32 O t3 [31:0] $end
   $var wire 32 P t4 [31:0] $end
   $var wire 32 Q t5 [31:0] $end
   $var wire 32 R t6 [31:0] $end
   $var wire 32 S s0 [31:0] $end
   $var wire 32 T s1 [31:0] $end
   $var wire 32 U s2 [31:0] $end
   $var wire 32 V s3 [31:0] $end
   $var wire 32 W s4 [31:0] $end
   $var wire 32 X s5 [31:0] $end
   $var wire 32 Y s6 [31:0] $end
   $var wire 32 Z s7 [31:0] $end
   $var wire 32 [ s8 [31:0] $end
   $var wire 32 \ s9 [31:0] $end
   $var wire 32 ] s10 [31:0] $end
   $var wire 32 ^ s11 [31:0] $end
   $var wire 32 _ InstrD [31:0] $end
   $var wire 32 ` InstrF [31:0] $end
   $var wire 32 a RD1E [31:0] $end
   $var wire 32 b RD2E [31:0] $end
   $var wire 32 c PCE [31:0] $end
   $var wire 32 d PCPlus4E [31:0] $end
   $var wire 1 e RegWriteE $end
   $var wire 1 f ALUSrcE $end
   $var wire 1 g MemWriteE $end
   $var wire 2 h ResultSrcE [1:0] $end
   $var wire 3 i modeAddrE [2:0] $end
   $var wire 1 j RegWriteM $end
   $var wire 1 k MemWriteM $end
   $var wire 2 l ResultSrcM [1:0] $end
   $var wire 3 m modeAddrM [2:0] $end
   $var wire 32 n ReadDataW [31:0] $end
   $var wire 32 o ReadDataM [31:0] $end
   $var wire 1 p RegWriteW $end
   $var wire 2 q ResultSrcW [1:0] $end
   $var wire 32 r PCPlus4W [31:0] $end
   $var wire 32 s ExtImmD [31:0] $end
   $var wire 32 t ExtImmE [31:0] $end
   $var wire 3 u ImmSrc [2:0] $end
   $var wire 1 v RegWriteD $end
   $var wire 4 w ALUControlD [3:0] $end
   $var wire 4 x ALUControlE [3:0] $end
   $var wire 1 y ALUSrcD $end
   $var wire 2 z ResultSrcD [1:0] $end
   $var wire 1 { MemWriteD $end
   $var wire 3 | modeAddrD [2:0] $end
   $var wire 1 } Zero $end
   $var wire 1 ~ MemReadD $end
   $var wire 1 !! MemReadE $end
   $var wire 1 "! JumpD $end
   $var wire 1 #! JumpE $end
   $var wire 1 $! BranchD $end
   $var wire 1 %! BranchE $end
   $var wire 32 &! WriteDataE [31:0] $end
   $var wire 32 '! WriteDataM [31:0] $end
   $var wire 32 (! ALUResultM [31:0] $end
   $var wire 32 )! ALUResultE [31:0] $end
   $var wire 32 *! ALUResultW [31:0] $end
   $var wire 32 +! PC [31:0] $end
   $var wire 32 ,! PCF [31:0] $end
   $var wire 32 -! PCPlus4F [31:0] $end
   $var wire 32 .! PCPlus4D [31:0] $end
   $var wire 32 /! PCPlus4M [31:0] $end
   $var wire 32 0! PCD [31:0] $end
   $var wire 5 1! Rs1D [4:0] $end
   $var wire 5 2! Rs1E [4:0] $end
   $var wire 5 3! Rs2D [4:0] $end
   $var wire 5 4! Rs2E [4:0] $end
   $var wire 5 5! RdD [4:0] $end
   $var wire 5 6! RdE [4:0] $end
   $var wire 5 7! RdM [4:0] $end
   $var wire 5 8! RdW [4:0] $end
   $var wire 32 9! RD1 [31:0] $end
   $var wire 32 :! RD2 [31:0] $end
   $var wire 32 ;! RD [31:0] $end
   $var wire 32 <! ResultW [31:0] $end
   $var wire 32 =! SrcAE [31:0] $end
   $var wire 2 >! ForwardAE [1:0] $end
   $var wire 2 ?! ForwardBE [1:0] $end
   $var wire 1 @! flush $end
   $var wire 1 A! stall $end
   $var wire 1 B! flushBranch $end
   $var wire 1 C! BPU_Src $end
   $var wire 32 D! PC_predict [31:0] $end
   $var wire 32 E! PC_next [31:0] $end
   $scope module BPU_mux $end
    $var wire 32 ~# WIDTH [31:0] $end
    $var wire 1 F! sel $end
    $var wire 32 G! in0 [31:0] $end
    $var wire 32 H! in1 [31:0] $end
    $var wire 32 I! out [31:0] $end
   $upscope $end
   $scope module PC_mux $end
    $var wire 32 ~# WIDTH [31:0] $end
    $var wire 1 J! ZeroE $end
    $var wire 1 K! JumpE $end
    $var wire 1 L! BranchE $end
    $var wire 32 M! PCPlus4F [31:0] $end
    $var wire 32 N! ALUResult [31:0] $end
    $var wire 32 O! PCTarget [31:0] $end
    $var wire 32 P! PC [31:0] $end
   $upscope $end
   $scope module alu $end
    $var wire 32 !$ CONTROL_WIDTH [31:0] $end
    $var wire 32 ~# DATA_WIDTH [31:0] $end
    $var wire 32 Q! SrcA [31:0] $end
    $var wire 32 R! SrcB [31:0] $end
    $var wire 4 S! ALUctrl [3:0] $end
    $var wire 32 T! ALUResult [31:0] $end
    $var wire 1 U! ZeroE $end
   $upscope $end
   $scope module branch_prediction_unit $end
    $var wire 32 ~# DATA_WIDTH [31:0] $end
    $var wire 1 V! clk $end
    $var wire 32 W! RD [31:0] $end
    $var wire 32 X! PCF [31:0] $end
    $var wire 1 Y! ZeroE $end
    $var wire 1 Z! BranchE $end
    $var wire 1 [! flushBranch $end
    $var wire 32 \! PCBPU [31:0] $end
    $var wire 1 ]! PCBPUSrc $end
    $scope module newBranch $end
     $var wire 32 ^! branchAddr [31:0] $end
     $var wire 32 _! targetAddr [31:0] $end
     $var wire 1 `! direction $end
     $var wire 1 a! prediction $end
    $upscope $end
    $scope module oldBranch $end
     $var wire 32 b! branchAddr [31:0] $end
     $var wire 32 c! targetAddr [31:0] $end
     $var wire 1 d! direction $end
     $var wire 1 e! prediction $end
    $upscope $end
    $var wire 2 f! forwardJumpCounter [1:0] $end
    $var wire 2 g! backwardJumpCounter [1:0] $end
   $upscope $end
   $scope module control_unit $end
    $var wire 32 ~# DATA_WIDTH [31:0] $end
    $var wire 32 h! InstrD [31:0] $end
    $var wire 2 i! ResultSrcD [1:0] $end
    $var wire 1 j! MemWriteD $end
    $var wire 1 k! JumpD $end
    $var wire 1 l! BranchD $end
    $var wire 4 m! ALUControlD [3:0] $end
    $var wire 1 n! ALUSrcD $end
    $var wire 3 o! ImmSrcD [2:0] $end
    $var wire 1 p! RegWriteD $end
    $var wire 3 q! modeAddr [2:0] $end
    $var wire 1 r! MemReadD $end
    $var wire 7 s! op [6:0] $end
    $var wire 3 t! funct3 [14:12] $end
    $var wire 1 u! funct7 $end
    $var wire 2 v! ALUOp [1:0] $end
    $var wire 1 w! Store $end
    $var wire 1 x! Load $end
    $scope module alu_decoder $end
     $var wire 2 y! ALUOp [1:0] $end
     $var wire 1 z! op $end
     $var wire 3 {! funct3 [2:0] $end
     $var wire 1 |! funct7 $end
     $var wire 4 }! ALUControl [3:0] $end
    $upscope $end
   $upscope $end
   $scope module data_memory $end
    $var wire 32 ~# WIDTH [31:0] $end
    $var wire 3 ~! modeAddr [2:0] $end
    $var wire 2 !" ResultSrc [1:0] $end
    $var wire 1 "" clk $end
    $var wire 32 #" A [31:0] $end
    $var wire 32 $" WD [31:0] $end
    $var wire 1 %" trigger $end
    $var wire 1 &" WE $end
    $var wire 32 '" RD [31:0] $end
   $upscope $end
   $scope module forwardAE_mux $end
    $var wire 32 ~# WIDTH [31:0] $end
    $var wire 2 (" sel [1:0] $end
    $var wire 32 )" in0 [31:0] $end
    $var wire 32 *" in1 [31:0] $end
    $var wire 32 +" in2 [31:0] $end
    $var wire 32 ," out [31:0] $end
   $upscope $end
   $scope module forwardBE_mux $end
    $var wire 32 ~# WIDTH [31:0] $end
    $var wire 2 -" sel [1:0] $end
    $var wire 32 ." in0 [31:0] $end
    $var wire 32 /" in1 [31:0] $end
    $var wire 32 0" in2 [31:0] $end
    $var wire 32 1" out [31:0] $end
   $upscope $end
   $scope module hazard_unit $end
    $var wire 32 "$ WIDTH [31:0] $end
    $var wire 5 2" RdM [4:0] $end
    $var wire 5 3" RdW [4:0] $end
    $var wire 5 4" RdE [4:0] $end
    $var wire 5 5" Rs1E [4:0] $end
    $var wire 5 6" Rs2E [4:0] $end
    $var wire 1 7" RegWriteM $end
    $var wire 1 8" RegWriteW $end
    $var wire 1 9" MemReadE $end
    $var wire 1 :" flushBranch $end
    $var wire 2 ;" ForwardAE [1:0] $end
    $var wire 2 <" ForwardBE [1:0] $end
    $var wire 1 =" stall $end
    $var wire 1 >" flush $end
   $upscope $end
   $scope module instruction_memory $end
    $var wire 32 ~# WIDTH [31:0] $end
    $var wire 32 ?" PC [31:0] $end
    $var wire 32 @" instr [31:0] $end
   $upscope $end
   $scope module pipeline_DE $end
    $var wire 32 ~# DATA_WIDTH [31:0] $end
    $var wire 32 "$ WIDTH [31:0] $end
    $var wire 1 A" clk $end
    $var wire 1 B" flush $end
    $var wire 1 C" MemReadD $end
    $var wire 1 D" MemReadE $end
    $var wire 1 E" RegWriteD $end
    $var wire 1 F" RegWriteE $end
    $var wire 2 G" ResultSrcD [1:0] $end
    $var wire 2 H" ResultSrcE [1:0] $end
    $var wire 1 I" MemWriteD $end
    $var wire 1 J" MemWriteE $end
    $var wire 1 K" JumpD $end
    $var wire 1 L" JumpE $end
    $var wire 1 M" BranchD $end
    $var wire 1 N" BranchE $end
    $var wire 4 O" ALUControlD [3:0] $end
    $var wire 4 P" ALUControlE [3:0] $end
    $var wire 1 Q" ALUSrcD $end
    $var wire 1 R" ALUSrcE $end
    $var wire 32 S" RD1 [31:0] $end
    $var wire 32 T" RD1E [31:0] $end
    $var wire 32 U" RD2 [31:0] $end
    $var wire 32 V" RD2E [31:0] $end
    $var wire 32 W" PCD [31:0] $end
    $var wire 32 X" PCE [31:0] $end
    $var wire 5 Y" Rs1D [4:0] $end
    $var wire 5 Z" Rs1E [4:0] $end
    $var wire 5 [" Rs2D [4:0] $end
    $var wire 5 \" Rs2E [4:0] $end
    $var wire 5 ]" RdD [4:0] $end
    $var wire 5 ^" RdE [4:0] $end
    $var wire 32 _" ExtImmD [31:0] $end
    $var wire 32 `" ExtImmE [31:0] $end
    $var wire 32 a" PCPlus4D [31:0] $end
    $var wire 32 b" PCPlus4E [31:0] $end
    $var wire 3 c" modeAddrD [2:0] $end
    $var wire 3 d" modeAddrE [2:0] $end
   $upscope $end
   $scope module pipeline_EM $end
    $var wire 32 ~# DATA_WIDTH [31:0] $end
    $var wire 32 "$ WIDTH [31:0] $end
    $var wire 1 e" clk $end
    $var wire 1 f" RegWriteE $end
    $var wire 1 g" RegWriteM $end
    $var wire 2 h" ResultSrcE [1:0] $end
    $var wire 2 i" ResultSrcM [1:0] $end
    $var wire 1 j" MemWriteE $end
    $var wire 1 k" MemWriteM $end
    $var wire 32 l" ALUResultE [31:0] $end
    $var wire 32 m" ALUResultM [31:0] $end
    $var wire 32 n" WriteDataE [31:0] $end
    $var wire 32 o" WriteDataM [31:0] $end
    $var wire 5 p" RdE [4:0] $end
    $var wire 5 q" RdM [4:0] $end
    $var wire 32 r" PCPlus4E [31:0] $end
    $var wire 32 s" PCPlus4M [31:0] $end
    $var wire 3 t" modeAddrE [2:0] $end
    $var wire 3 u" modeAddrM [2:0] $end
   $upscope $end
   $scope module pipeline_FD $end
    $var wire 32 ~# DATA_WIDTH [31:0] $end
    $var wire 1 v" clk $end
    $var wire 1 w" flush $end
    $var wire 1 x" stall $end
    $var wire 32 y" RD [31:0] $end
    $var wire 32 z" InstrD [31:0] $end
    $var wire 32 {" PCF [31:0] $end
    $var wire 32 |" PCD [31:0] $end
    $var wire 32 }" PCPlus4F [31:0] $end
    $var wire 32 ~" PCPlus4D [31:0] $end
   $upscope $end
   $scope module pipeline_MW $end
    $var wire 32 ~# DATA_WIDTH [31:0] $end
    $var wire 32 "$ WIDTH [31:0] $end
    $var wire 1 !# clk $end
    $var wire 1 "# RegWriteM $end
    $var wire 1 ## RegWriteW $end
    $var wire 2 $# ResultSrcM [1:0] $end
    $var wire 2 %# ResultSrcW [1:0] $end
    $var wire 32 &# ALUResultM [31:0] $end
    $var wire 32 '# ALUResultW [31:0] $end
    $var wire 32 (# ReadDataM [31:0] $end
    $var wire 32 )# ReadDataW [31:0] $end
    $var wire 5 *# RdM [4:0] $end
    $var wire 5 +# RdW [4:0] $end
    $var wire 32 ,# PCPlus4M [31:0] $end
    $var wire 32 -# PCPlus4W [31:0] $end
   $upscope $end
   $scope module program_counter $end
    $var wire 32 ~# WIDTH [31:0] $end
    $var wire 1 .# clk $end
    $var wire 1 /# rst $end
    $var wire 32 0# PC [31:0] $end
    $var wire 1 1# stall $end
    $var wire 32 2# PCF [31:0] $end
   $upscope $end
   $scope module regfile $end
    $var wire 32 "$ ADDRESS_WIDTH [31:0] $end
    $var wire 32 ~# DATA_WIDTH [31:0] $end
    $var wire 1 3# clk $end
    $var wire 5 4# AD1 [4:0] $end
    $var wire 5 5# AD2 [4:0] $end
    $var wire 5 6# AD3 [4:0] $end
    $var wire 1 7# WE3 $end
    $var wire 32 8# WD3 [31:0] $end
    $var wire 32 9# RD1 [31:0] $end
    $var wire 32 :# RD2 [31:0] $end
    $var wire 32 ;# a0 [31:0] $end
    $var wire 32 <# a1 [31:0] $end
    $var wire 32 =# a2 [31:0] $end
    $var wire 32 ># a3 [31:0] $end
    $var wire 32 ?# a4 [31:0] $end
    $var wire 32 @# a5 [31:0] $end
    $var wire 32 A# a6 [31:0] $end
    $var wire 32 B# a7 [31:0] $end
    $var wire 32 C# t0 [31:0] $end
    $var wire 32 D# t1 [31:0] $end
    $var wire 32 E# t2 [31:0] $end
    $var wire 32 F# t3 [31:0] $end
    $var wire 32 G# t4 [31:0] $end
    $var wire 32 H# t5 [31:0] $end
    $var wire 32 I# t6 [31:0] $end
    $var wire 32 J# s0 [31:0] $end
    $var wire 32 K# s1 [31:0] $end
    $var wire 32 L# s2 [31:0] $end
    $var wire 32 M# s3 [31:0] $end
    $var wire 32 N# s4 [31:0] $end
    $var wire 32 O# s5 [31:0] $end
    $var wire 32 P# s6 [31:0] $end
    $var wire 32 Q# s7 [31:0] $end
    $var wire 32 R# s8 [31:0] $end
    $var wire 32 S# s9 [31:0] $end
    $var wire 32 T# s10 [31:0] $end
    $var wire 32 U# s11 [31:0] $end
    $var wire 32 V# registerfile_array[0] [31:0] $end
    $var wire 32 W# registerfile_array[1] [31:0] $end
    $var wire 32 X# registerfile_array[2] [31:0] $end
    $var wire 32 Y# registerfile_array[3] [31:0] $end
    $var wire 32 Z# registerfile_array[4] [31:0] $end
    $var wire 32 [# registerfile_array[5] [31:0] $end
    $var wire 32 \# registerfile_array[6] [31:0] $end
    $var wire 32 ]# registerfile_array[7] [31:0] $end
    $var wire 32 ^# registerfile_array[8] [31:0] $end
    $var wire 32 _# registerfile_array[9] [31:0] $end
    $var wire 32 `# registerfile_array[10] [31:0] $end
    $var wire 32 a# registerfile_array[11] [31:0] $end
    $var wire 32 b# registerfile_array[12] [31:0] $end
    $var wire 32 c# registerfile_array[13] [31:0] $end
    $var wire 32 d# registerfile_array[14] [31:0] $end
    $var wire 32 e# registerfile_array[15] [31:0] $end
    $var wire 32 f# registerfile_array[16] [31:0] $end
    $var wire 32 g# registerfile_array[17] [31:0] $end
    $var wire 32 h# registerfile_array[18] [31:0] $end
    $var wire 32 i# registerfile_array[19] [31:0] $end
    $var wire 32 j# registerfile_array[20] [31:0] $end
    $var wire 32 k# registerfile_array[21] [31:0] $end
    $var wire 32 l# registerfile_array[22] [31:0] $end
    $var wire 32 m# registerfile_array[23] [31:0] $end
    $var wire 32 n# registerfile_array[24] [31:0] $end
    $var wire 32 o# registerfile_array[25] [31:0] $end
    $var wire 32 p# registerfile_array[26] [31:0] $end
    $var wire 32 q# registerfile_array[27] [31:0] $end
    $var wire 32 r# registerfile_array[28] [31:0] $end
    $var wire 32 s# registerfile_array[29] [31:0] $end
    $var wire 32 t# registerfile_array[30] [31:0] $end
    $var wire 32 u# registerfile_array[31] [31:0] $end
   $upscope $end
   $scope module regfile_mux $end
    $var wire 32 ~# WIDTH [31:0] $end
    $var wire 2 v# sel [1:0] $end
    $var wire 32 w# in0 [31:0] $end
    $var wire 32 x# in1 [31:0] $end
    $var wire 32 y# in2 [31:0] $end
    $var wire 32 z# out [31:0] $end
   $upscope $end
   $scope module sign_extend $end
    $var wire 32 ~# DATA_WIDTH [31:0] $end
    $var wire 3 {# ImmSrc [2:0] $end
    $var wire 32 |# ImmInput [31:0] $end
    $var wire 32 }# ImmExt [31:0] $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
1#
0$
0%
b00000000000000000000000000000000 &
b00000000000000000000000000000000 '
b00000000000000000000000000000000 (
b00000000000000000000000000000000 )
b00000000000000000000000000000000 *
b00000000000000000000000000000000 +
b00000000000000000000000000000000 ,
b00000000000000000000000000000000 -
b00000000000000000000000000000000 .
b00000000000000000000000000000000 /
b00000000000000000000000000000000 0
b00000000000000000000000000000000 1
b00000000000000000000000000000000 2
b00000000000000000000000000000000 3
b00000000000000000000000000000000 4
b00000000000000000000000000000000 5
b00000000000000000000000000000000 6
b00000000000000000000000000000000 7
b00000000000000000000000000000000 8
b00000000000000000000000000000000 9
b00000000000000000000000000000000 :
b00000000000000000000000000000000 ;
b00000000000000000000000000000000 <
b00000000000000000000000000000000 =
b00000000000000000000000000000000 >
b00000000000000000000000000000000 ?
b00000000000000000000000000000000 @
0A
0B
0C
b00000000000000000000000000000000 D
b00000000000000000000000000000000 E
b00000000000000000000000000000000 F
b00000000000000000000000000000000 G
b00000000000000000000000000000000 H
b00000000000000000000000000000000 I
b00000000000000000000000000000000 J
b00000000000000000000000000000000 K
b00000000000000000000000000000000 L
b00000000000000000000000000000000 M
b00000000000000000000000000000000 N
b00000000000000000000000000000000 O
b00000000000000000000000000000000 P
b00000000000000000000000000000000 Q
b00000000000000000000000000000000 R
b00000000000000000000000000000000 S
b00000000000000000000000000000000 T
b00000000000000000000000000000000 U
b00000000000000000000000000000000 V
b00000000000000000000000000000000 W
b00000000000000000000000000000000 X
b00000000000000000000000000000000 Y
b00000000000000000000000000000000 Z
b00000000000000000000000000000000 [
b00000000000000000000000000000000 \
b00000000000000000000000000000000 ]
b00000000000000000000000000000000 ^
b00000000000000000000000000000000 _
b00000000000000000000000000000000 `
b00000000000000000000000000000000 a
b00000000000000000000000000000000 b
b00000000000000000000000000000000 c
b00000000000000000000000000000000 d
0e
0f
0g
b00 h
b000 i
0j
0k
b00 l
b000 m
b00000000000000000000000000000000 n
b00000000000000000000000000000000 o
0p
b00 q
b00000000000000000000000000000000 r
b00000000000000000000000000000000 s
b00000000000000000000000000000000 t
b000 u
0v
b0000 w
b0000 x
0y
b00 z
0{
b000 |
0}
0~
0!!
0"!
0#!
0$!
0%!
b00000000000000000000000000000000 &!
b00000000000000000000000000000000 '!
b00000000000000000000000000000000 (!
b00000000000000000000000000000000 )!
b00000000000000000000000000000000 *!
b00000000000000000000000000000000 +!
b00000000000000000000000000000000 ,!
b00000000000000000000000000000000 -!
b00000000000000000000000000000000 .!
b00000000000000000000000000000000 /!
b00000000000000000000000000000000 0!
b00000 1!
b00000 2!
b00000 3!
b00000 4!
b00000 5!
b00000 6!
b00000 7!
b00000 8!
b00000000000000000000000000000000 9!
b00000000000000000000000000000000 :!
b00000000000000000000000000000000 ;!
b00000000000000000000000000000000 <!
b00000000000000000000000000000000 =!
b00 >!
b00 ?!
0@!
0A!
0B!
0C!
b00000000000000000000000000000000 D!
b00000000000000000000000000000000 E!
0F!
b00000000000000000000000000000000 G!
b00000000000000000000000000000000 H!
b00000000000000000000000000000000 I!
0J!
0K!
0L!
b00000000000000000000000000000000 M!
b00000000000000000000000000000000 N!
b00000000000000000000000000000000 O!
b00000000000000000000000000000000 P!
b00000000000000000000000000000000 Q!
b00000000000000000000000000000000 R!
b0000 S!
b00000000000000000000000000000000 T!
0U!
0V!
b00000000000000000000000000000000 W!
b00000000000000000000000000000000 X!
0Y!
0Z!
0[!
b00000000000000000000000000000000 \!
0]!
b00000000000000000000000000000000 ^!
b00000000000000000000000000000000 _!
0`!
0a!
b00000000000000000000000000000000 b!
b00000000000000000000000000000000 c!
0d!
0e!
b00 f!
b00 g!
b00000000000000000000000000000000 h!
b00 i!
0j!
0k!
0l!
b0000 m!
0n!
b000 o!
0p!
b000 q!
0r!
b0000000 s!
b000 t!
0u!
b00 v!
0w!
0x!
b00 y!
0z!
b000 {!
0|!
b0000 }!
b000 ~!
b00 !"
0""
b00000000000000000000000000000000 #"
b00000000000000000000000000000000 $"
0%"
0&"
b00000000000000000000000000000000 '"
b00 ("
b00000000000000000000000000000000 )"
b00000000000000000000000000000000 *"
b00000000000000000000000000000000 +"
b00000000000000000000000000000000 ,"
b00 -"
b00000000000000000000000000000000 ."
b00000000000000000000000000000000 /"
b00000000000000000000000000000000 0"
b00000000000000000000000000000000 1"
b00000 2"
b00000 3"
b00000 4"
b00000 5"
b00000 6"
07"
08"
09"
0:"
b00 ;"
b00 <"
0="
0>"
b00000000000000000000000000000000 ?"
b00000000000000000000000000000000 @"
0A"
0B"
0C"
0D"
0E"
0F"
b00 G"
b00 H"
0I"
0J"
0K"
0L"
0M"
0N"
b0000 O"
b0000 P"
0Q"
0R"
b00000000000000000000000000000000 S"
b00000000000000000000000000000000 T"
b00000000000000000000000000000000 U"
b00000000000000000000000000000000 V"
b00000000000000000000000000000000 W"
b00000000000000000000000000000000 X"
b00000 Y"
b00000 Z"
b00000 ["
b00000 \"
b00000 ]"
b00000 ^"
b00000000000000000000000000000000 _"
b00000000000000000000000000000000 `"
b00000000000000000000000000000000 a"
b00000000000000000000000000000000 b"
b000 c"
b000 d"
0e"
0f"
0g"
b00 h"
b00 i"
0j"
0k"
b00000000000000000000000000000000 l"
b00000000000000000000000000000000 m"
b00000000000000000000000000000000 n"
b00000000000000000000000000000000 o"
b00000 p"
b00000 q"
b00000000000000000000000000000000 r"
b00000000000000000000000000000000 s"
b000 t"
b000 u"
0v"
0w"
0x"
b00000000000000000000000000000000 y"
b00000000000000000000000000000000 z"
b00000000000000000000000000000000 {"
b00000000000000000000000000000000 |"
b00000000000000000000000000000000 }"
b00000000000000000000000000000000 ~"
0!#
0"#
0##
b00 $#
b00 %#
b00000000000000000000000000000000 &#
b00000000000000000000000000000000 '#
b00000000000000000000000000000000 (#
b00000000000000000000000000000000 )#
b00000 *#
b00000 +#
b00000000000000000000000000000000 ,#
b00000000000000000000000000000000 -#
0.#
0/#
b00000000000000000000000000000000 0#
01#
b00000000000000000000000000000000 2#
03#
b00000 4#
b00000 5#
b00000 6#
07#
b00000000000000000000000000000000 8#
b00000000000000000000000000000000 9#
b00000000000000000000000000000000 :#
b00000000000000000000000000000000 ;#
b00000000000000000000000000000000 <#
b00000000000000000000000000000000 =#
b00000000000000000000000000000000 >#
b00000000000000000000000000000000 ?#
b00000000000000000000000000000000 @#
b00000000000000000000000000000000 A#
b00000000000000000000000000000000 B#
b00000000000000000000000000000000 C#
b00000000000000000000000000000000 D#
b00000000000000000000000000000000 E#
b00000000000000000000000000000000 F#
b00000000000000000000000000000000 G#
b00000000000000000000000000000000 H#
b00000000000000000000000000000000 I#
b00000000000000000000000000000000 J#
b00000000000000000000000000000000 K#
b00000000000000000000000000000000 L#
b00000000000000000000000000000000 M#
b00000000000000000000000000000000 N#
b00000000000000000000000000000000 O#
b00000000000000000000000000000000 P#
b00000000000000000000000000000000 Q#
b00000000000000000000000000000000 R#
b00000000000000000000000000000000 S#
b00000000000000000000000000000000 T#
b00000000000000000000000000000000 U#
b00000000000000000000000000000000 V#
b00000000000000000000000000000000 W#
b00000000000000000000000000000000 X#
b00000000000000000000000000000000 Y#
b00000000000000000000000000000000 Z#
b00000000000000000000000000000000 [#
b00000000000000000000000000000000 \#
b00000000000000000000000000000000 ]#
b00000000000000000000000000000000 ^#
b00000000000000000000000000000000 _#
b00000000000000000000000000000000 `#
b00000000000000000000000000000000 a#
b00000000000000000000000000000000 b#
b00000000000000000000000000000000 c#
b00000000000000000000000000000000 d#
b00000000000000000000000000000000 e#
b00000000000000000000000000000000 f#
b00000000000000000000000000000000 g#
b00000000000000000000000000000000 h#
b00000000000000000000000000000000 i#
b00000000000000000000000000000000 j#
b00000000000000000000000000000000 k#
b00000000000000000000000000000000 l#
b00000000000000000000000000000000 m#
b00000000000000000000000000000000 n#
b00000000000000000000000000000000 o#
b00000000000000000000000000000000 p#
b00000000000000000000000000000000 q#
b00000000000000000000000000000000 r#
b00000000000000000000000000000000 s#
b00000000000000000000000000000000 t#
b00000000000000000000000000000000 u#
b00 v#
b00000000000000000000000000000000 w#
b00000000000000000000000000000000 x#
b00000000000000000000000000000000 y#
b00000000000000000000000000000000 z#
b000 {#
b00000000000000000000000000000000 |#
b00000000000000000000000000000000 }#
b00000000000000000000000000100000 ~#
b00000000000000000000000000000100 !$
b00000000000000000000000000000101 "$
